<!-- talks.html.ep -->
<aside id="talks" class="ui floating styled sidebar">
% my $talks = Ado::Model::Vest->talks($user, int(param('limit')||20), 0);
  <ul>
% foreach my $talk (@$talks) {
% # TODO: add group talks in case to_guid !=0
    <li>
      <%= link_to $vest_base_url.'/messages/'.$talk->{id}.'.json'
        => (id=>'talk'.$talk->{id}) =>begin %>
      <%= $talk->{from_uid} eq $user->id?$talk->{to_uid_name}:$talk->{from_uid_name} %>
            (<%= $talk->{subject} %>)
      %= end
    </li>
%}
  </ul>
% # TODO: add previous X and next X talks menu 
% # at the bottom of the sidebar
</aside>
%= javascript begin
// Functionality related to talks
"use strict";
// global object used to store various data
var VestTalk = {};
jQuery(function($) {
  //Initialize the left sidebar
  $('#talks').sidebar();
  $('#talks_button').click(function() {
    $('#talks').sidebar('toggle');
  });
  // Fill in #messages with the last talk and
  // bind onclick to filling in messages in the #messages
  $('#talks ul li a').click(list_messages);
  // List messages from the last talk.
  $('#talks ul li a:first').click();
}); // end jQuery(function($)
// Lists messages from a talk
function list_messages(e) {
  //console.log(e.target);
  var a = e.target;
  // close the sidebar
  $('#talks').sidebar('hide');

  // get the messages
  $.get(a.href, list_messages_from_json);
  return false;
}

// Fills in mesages list box from received json
function list_messages_from_json(json_messages) {
    var messages = $('#messages .ui.list');
    messages.html('');
    //Save it for later use by validate_and_send_message
    VestTalk.json_messages = json_messages;
    //
    //console.log(json_messages);
    var prev_msg = {};
    $(json_messages.data).each(function(i, msg) {

      // This is the message defining the topic (the parent message).
      if (msg.subject_message_id == 0) {
        set_talk_form(msg); // Set the topic
        //append the first message if there is no offset
        if (json_messages.links[0].href.match("offset=[1-9]")) return;
      }

      // fill in template and display the message
      fill_in_message_template(msg, prev_msg).appendTo(messages);
      prev_msg = msg;

    });
    // Scroll down to the last message
    messages.parent().scrollTop(messages.height());
  } // end function list_talk_messages_from_json

/**
 * Prepares the HTML for the message and returns it.
 * @param masg {Object} The object containig the message
 * @param prev_msg {Obbject} The previous message in the talk.
 * @return {jQuery} The prepared DOM, ready to be appended
 */
function fill_in_message_template(msg, prev_msg) {
    // fill in template and display the message
    var template = $($('#message_template').html()); //copy
    template.attr('id', 'msg' + msg.id);
    //just to debug order by
    template.attr('title', 'msg' + msg.id);

    var date = new Date(msg.tstamp);
    template.find('.date').html(date.toTimeString());
    template.find('.message').html(msg.message);
    if (prev_msg.from_uid == msg.from_uid) {
      template.find('.from_uid_name').html('...');
    } else {
      template.find('.from_uid_name').html(msg.from_uid_name + ':');
    }
    /* template.find('.ui.avatar.image')
    .attr('src',
      'https://secure.gravatar.com/avatar/'
      + msg.from_uid_gravatar
      +'?s=40&amp;d=identicon'
    ); */
    return template;
  } // end function fill_in_message_template(msg){

// Sets the current talk title and hidden fields in the message form
function set_talk_form(msg) {
    if (msg.subject_message_id != 0) {
      alert('subject_message_id!=0')
      return false;
    }
    $('#talk_topic').html(msg.message.substring(0, 30) + '...');
    $('#talk_topic').attr('title', msg.message);
    var fields = ['to_guid', 'subject', 'message_assets'];
    $.each(fields, function(i, k) {
      $('#message_form [name="' + k + '"]').val(msg[k]);
    });
    var uid = $('#message_form [name="from_uid"]').val();
    $('#message_form [name="to_uid"]').val(
      // to_uid points to the other participant in the talk
      uid == msg.to_uid ? msg.from_uid : msg.to_uid);
    $('#message_form [name="subject_message_id"]').val(msg.id);
  } // end function set_talk(msg)
%= end
